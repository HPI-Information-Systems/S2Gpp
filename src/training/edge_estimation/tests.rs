use actix::prelude::*;
use actix_telepathy::prelude::*;
use std::collections::HashMap;
use ndarray::{arr2, Array2};
use crate::training::node_estimation::tests::{generate_intersections, generate_intersection_coords};
use crate::parameters::{Parameters, Role};
use crate::training::{Training, StartTrainingMessage};
use port_scanner::request_open_port;
use std::sync::{Arc, Mutex};
use crate::training::intersection_calculation::{IntersectionCalculation, IntersectionCalculationDone};
use crate::utils::{HelperProtocol, ClusterNodes};
use crate::training::node_estimation::{NodeEstimationDone, NodeEstimation};
use actix_rt::time::delay_for;
use std::time::Duration;
use crate::data_manager::DatasetStats;
use crate::training::edge_estimation::EdgeEstimator;
use crate::training::segmenter::{SegmentedTransition, Segmentation};


#[derive(Default)]
struct Checker {
    pub success: Arc<Mutex<bool>>
}

impl Actor for Checker {
    type Context = Context<Self>;
}

impl Handler<CheckingMessage> for Checker {
    type Result = ();

    fn handle(&mut self, msg: CheckingMessage, ctx: &mut Self::Context) -> Self::Result {
        *(self.success.lock().unwrap()) = true;
    }
}


#[derive(Message)]
#[rtype(Result = "()")]
struct CheckingMessage {
    pub rec: Option<Recipient<CheckingMessage>>
}


impl Handler<CheckingMessage> for Training {
    type Result = ();

    fn handle(&mut self, msg: CheckingMessage, ctx: &mut Self::Context) -> Self::Result {
        println!("{} edges estimated", self.edge_estimation.edges.len());
        for edge in &self.edge_estimation.edge_in_time {
            println!("{}", edge);
        }
        assert_eq!(self.edge_estimation.edges.len(), 1958);
        for edge in self.edge_estimation.edges.iter() {
            if edge.0.0 == 94 && edge.0.1 == 5 {
                assert_eq!(edge.1.0, 95);
                assert_eq!(edge.1.1, 5);
            }

            if edge.0.0 == 57 && edge.0.1 == 3 {
                assert_eq!(edge.1.0, 58);
                assert_eq!(edge.1.1, 3);
            }
        }

        assert_eq!(self.edge_estimation.edge_in_time[192], 378);
        assert_eq!(self.edge_estimation.edge_in_time.last().unwrap().clone(), 1958);

        msg.rec.unwrap().do_send(CheckingMessage { rec: None });
    }
}


#[derive(Message)]
#[rtype(Result = "()")]
struct StartEdgeEstimation {
    pub parallel: bool
}


impl Handler<StartEdgeEstimation> for Training {
    type Result = ();

    fn handle(&mut self, msg: StartEdgeEstimation, ctx: &mut Self::Context) -> Self::Result {
        self.estimate_edges(ctx);
    }
}


#[actix_rt::test]
async fn test_edge_estimation() {
    env_logger::init();

    let _cluster = Cluster::new(format!("127.0.0.1:{}", request_open_port().unwrap_or(8000)).parse().unwrap(), vec![]);
    let mut parameters = Parameters {
        role: Role::Main {
            data_path: "data/test.csv".to_string()
        },
        n_threads: 20,
        n_cluster_nodes: 1,
        ..Default::default()
    };
    let mut training = Training::new(parameters);

    let success = Arc::new(Mutex::new(false));
    let checker = Checker { success: success.clone() }.start();

    let training_addr = training.start();
    training_addr.do_send(StartTrainingMessage {nodes: ClusterNodes::new()});
    delay_for(Duration::from_millis(10000)).await;
    training_addr.do_send(CheckingMessage{ rec: Some(checker.recipient()) });
    delay_for(Duration::from_millis(200)).await;
    assert!(*success.lock().unwrap())
}


pub fn generate_nodes() -> HashMap<usize, Array2<f32>> {
    let mut nodes = HashMap::new();
    nodes.insert(0, arr2(&[[867.0],[714.0],[561.0],[408.0],[255.0],[127.5]]));
    nodes.insert(1, arr2(&[[865.8608723551209],[713.1509540909001],[560.440999951112],[407.73096589076096],[255.0206749264089],[127.7609979824353]]));
    nodes.insert(2, arr2(&[[816.8973892441164],[612.9280496134244],[408.9587000879208],[204.9892799331753]]));
    nodes.insert(3, arr2(&[[815.9805370689759],[612.3662267897056],[408.7517919751514],[205.13646254912263]]));
    nodes.insert(4, arr2(&[[817.8049823848414],[613.8633951839971],[409.9217892494947],[205.98005120676186]]));
    nodes.insert(5, arr2(&[[817.0111098584367],[613.3942032337899],[409.77717365449416],[206.15927155228908]]));
    nodes.insert(6, arr2(&[[818.7070946138167],[614.7950957403682],[410.88306881943896],[206.9708464425325]]));
    nodes.insert(7, arr2(&[[818.0424241364569],[614.4220302944659],[410.8015153476642],[207.1801512677978]]));
    nodes.insert(8, arr2(&[[819.6292022108206],[615.7408825382214],[411.8525274911785],[207.96392878845887]]));
    nodes.insert(9, arr2(&[[819.0879269328749],[615.4616487330011],[411.83525201335664],[208.2080339684565]]));
    nodes.insert(10, arr2(&[[820.5438641598561],[616.6817025174166],[412.81949748429986],[208.95699697143408]]));
    nodes.insert(11, arr2(&[[820.1338581125785],[616.5009239423213],[412.86787405369216],[209.23403144065082]]));
    nodes.insert(12, arr2(&[[821.4612477320928],[617.6246547857635],[413.78801071593296],[209.95102238038643]]));
    nodes.insert(13, arr2(&[[821.1749138225192],[617.5355725353257],[413.8961182253228],[210.25589839226956]]));
    nodes.insert(14, arr2(&[[822.3983263867747],[618.5813462495123],[414.7643092025622],[210.94689312651676]]));
    nodes.insert(15, arr2(&[[822.2313585345499],[618.5828258573817],[414.93418368572776],[211.2848080647233]]));
    nodes.insert(16, arr2(&[[823.3258071237336],[619.5317421985025],[415.73761362847955],[211.94306571524538]]));
    nodes.insert(17, arr2(&[[823.2915600285068],[619.6327793558321],[415.97389300461435],[212.31430642943957]]));
    nodes.insert(18, arr2(&[[824.2503383566772],[620.4805384735947],[416.7106678786966],[212.94033626704876]]));
    nodes.insert(19, arr2(&[[824.347744696615],[620.6790501310595],[417.01025355949275],[213.34078830285304]]));
    nodes.insert(20, arr2(&[[825.1940083938317],[621.4425746779291],[417.69106507003596],[213.9390657967611]]));
    nodes.insert(21, arr2(&[[825.4205215130281],[621.7386984208114],[418.0567779338053],[214.37422565027921]]));
    nodes.insert(22, arr2(&[[826.1349735730953],[622.4032343428471],[418.6714137007136],[214.93907310765695]]));
    nodes.insert(23, arr2(&[[826.4906233368799],[622.7958294494667],[419.10094268031077],[215.4054595790123]]));
    nodes.insert(24, arr2(&[[827.0850609236614],[623.3703683950123],[419.65558980033785],[215.94026701960158]]));
    nodes.insert(25, arr2(&[[827.5701674308818],[623.860394071259],[420.1505328983422],[216.44011361797894]]));
    nodes.insert(26, arr2(&[[828.0566951308338],[624.3517190966296],[420.6466545972166],[216.94103627827036]]));
    nodes.insert(27, arr2(&[[828.6550043819788],[624.928988454648],[421.2028901050518],[217.47627310201418]]));
    nodes.insert(28, arr2(&[[829.01514081036],[625.3250829305658],[421.63493266540837],[217.94420962201534]]));
    nodes.insert(29, arr2(&[[829.7398152314521],[625.9973223581304],[422.25475246387487],[218.51170263201956]]));
    nodes.insert(30, arr2(&[[829.9766152656678],[626.30104626387],[422.6253811310468],[218.94912564767372]]));
    nodes.insert(31, arr2(&[[830.8400361231685],[627.0778620679083],[423.3156172830473],[219.55293598177263]]));
    nodes.insert(32, arr2(&[[830.9477858227476],[627.2835914435797],[423.61929815068606],[219.95440310059908]]));
    nodes.insert(33, arr2(&[[831.9282484699162],[628.1485346835449],[424.368755758016],[220.58857861636352]]));
    nodes.insert(34, arr2(&[[831.9188803643059],[628.2671538762924],[424.61532540459086],[220.96288218423499]]));
    nodes.insert(35, arr2(&[[833.0356095814396],[629.234395348366],[425.43312266603607],[221.63149597728167]]));
    nodes.insert(36, arr2(&[[832.8989583051074],[629.2568030376782],[425.6145435973271],[221.97166189136388]]));
    nodes.insert(37, arr2(&[[834.1520252258791],[630.3273021806389],[426.5025278880325],[222.67744603816104]]));
    nodes.insert(38, arr2(&[[833.8864848816474],[630.2510973618937],[426.61560431926324],[222.9794865823508]]));
    nodes.insert(39, arr2(&[[835.250103084462],[631.4054056302729],[427.56066302557707],[223.715651895412]]));
    nodes.insert(40, arr2(&[[834.8764841477599],[631.2482385740481],[427.6198860353955],[223.99090581681503]]));
    nodes.insert(41, arr2(&[[836.3764254850877],[632.5058844331116],[428.6353059538391],[224.76450684880788]]));
    nodes.insert(42, arr2(&[[835.8720790781292],[632.2494466209821],[428.6267062121555],[225.0033378062642]]));
    nodes.insert(43, arr2(&[[837.5264571286704],[633.6250369011938],[429.7235883307254],[225.82197413455043]]));
    nodes.insert(44, arr2(&[[836.8722886950272],[633.2534603657452],[429.6345236263647],[226.01496160594164]]));
    nodes.insert(45, arr2(&[[838.6533996715498],[634.7256890844571],[430.7979578286325],[226.87010682989336]]));
    nodes.insert(46, arr2(&[[837.8781183524092],[634.2625588474657],[430.6468906301425],[227.0306006428966]]));
    nodes.insert(47, arr2(&[[839.8055392765149],[635.8461857848499],[431.88682073541514],[227.92738929173302]]));
    nodes.insert(48, arr2(&[[838.8880121257655],[635.2742018168219],[431.66028292619507],[228.0457481533177]]));
    nodes.insert(49, arr2(&[[840.9537846939171],[636.9634625234858],[432.97313761627004],[228.98279711834286]]));
    nodes.insert(50, arr2(&[[839.9036501350521],[636.2904701630844],[432.677182051894],[229.06328556643692]]));
    nodes.insert(51, arr2(&[[841.9663371306822],[637.9760149824605],[433.9856901446219],[229.99535035966528]]));
    nodes.insert(52, arr2(&[[840.9244883565278],[637.3106786273457],[433.6967615477053],[230.0822453831363]]));
    nodes.insert(53, arr2(&[[842.8589752685402],[638.8996219312791],[434.94025736416785],[230.98083087946083]]));
    nodes.insert(54, arr2(&[[841.9488170730127],[638.333258723047],[434.7175941135716],[231.10134121029688]]));
    nodes.insert(55, arr2(&[[843.7499423739976],[639.822232170014],[435.8945021109888],[231.96666342539314]]));
    nodes.insert(56, arr2(&[[842.9816242703763],[639.3627976579785],[435.74386628187284],[232.12435941984253]]));
    nodes.insert(57, arr2(&[[844.6598905933615],[640.7584710366974],[436.8570245619024],[232.95543194636483]]));
    nodes.insert(58, arr2(&[[844.0132296952171],[640.3905995059247],[436.76786618185145],[233.1445706963255]]));
    nodes.insert(59, arr2(&[[845.5550526933823],[641.6845127162081],[437.81393759493034],[233.94317310854464]]));
    nodes.insert(60, arr2(&[[845.0551513809568],[641.426908599572],[437.7985647846447],[234.1696744466676]]));
    nodes.insert(61, arr2(&[[846.4680685007258],[693.5845496492245],[540.7010150017325],[387.81744401899726],[234.93374652040893],[107.52989682086667]]));
    nodes.insert(62, arr2(&[[846.1040981116712],[693.3775672142062],[540.6509992006904],[387.9243457357862],[235.19739406788386],[107.92310101427688]]));
    nodes.insert(63, arr2(&[[847.4012815396027],[694.5327442214123],[541.6641891600941],[388.79559335288275],[235.92685628569228],[108.53540346057358]]));
    nodes.insert(64, arr2(&[[847.1474815504846],[694.4158750330091],[541.6842322540438],[388.9525061311884],[236.22049042304508],[108.94207130981022]]));
    nodes.insert(65, arr2(&[[848.3236600231891],[695.4727551849419],[542.6218303191362],[389.77085953771336],[236.91973025304037],[109.54286869646396]]));
    nodes.insert(66, arr2(&[[848.2065555903409],[695.4677707524579],[542.7289507817908],[389.99005019579363],[237.25087070617755],[109.96658304666249]]));
    nodes.insert(67, arr2(&[[849.253560261784],[696.418781617132],[543.5839808834893],[390.7491295918579],[237.91410451023117],[110.55059561570303]]));
    nodes.insert(68, arr2(&[[849.2805547543597],[696.5324189864721],[543.7842494945647],[391.03600274765967],[238.28748985586782],[110.99553269527144]]));
    nodes.insert(69, arr2(&[[850.1970022933126],[697.3753792265121],[544.5537324239084],[391.73203138369706],[238.9101446899187],[111.55753860506259]]));
    nodes.insert(70, arr2(&[[850.3456065079329],[697.5889397711846],[544.832240598713],[392.07546724520023],[239.31843941569846],[112.01948393244642]]));
    nodes.insert(71, arr2(&[[851.1347776054487],[698.327916309576],[545.5210294341163],[392.7140842035993],[239.90694005649038],[112.56656746069997]]));
    nodes.insert(72, arr2(&[[851.4266666469109],[698.6591331263575],[545.8915687561154],[393.1239339477986],[240.3560585123043],[113.04816848327417]]));
    nodes.insert(73, arr2(&[[852.0835896784217],[699.2890869108571],[546.4945570539611],[393.6999654987654],[240.9051645001563],[113.57504236253683]]));
    nodes.insert(74, arr2(&[[852.5082413488128],[699.7295190437096],[546.9507675039388],[394.1719493227353],[241.39290442794862],[114.0758076215165]]));
    nodes.insert(75, arr2(&[[853.0343621503195],[700.252042153273],[547.4696935944486],[394.68728008937813],[241.9046470179926],[114.58463251864234]]));
    nodes.insert(76, arr2(&[[853.5600713988963],[700.774061702358],[547.9880238612261],[395.20192196879805],[242.41560307745414],[115.09251951128637]]));
    nodes.insert(77, arr2(&[[853.9902668787105],[701.2191823196026],[548.4480678637808],[395.67688553617285],[242.90547468346608],[115.59478668675877]]));
    nodes.insert(78, arr2(&[[854.6508567122107],[701.8520616900576],[549.0532403213986],[396.25435909067244],[243.45527588031837],[116.12165472480851]]));
    nodes.insert(79, arr2(&[[854.9533083463342],[702.1919526757423],[549.4305659818144],[396.6691089719793],[243.90741616217665],[116.6048104227124]]));
    nodes.insert(80, arr2(&[[855.7543743615639],[702.9408080447035],[550.1272174222249],[397.3135716637496],[244.49974062269902],[117.15393374358206]]));
    nodes.insert(81, arr2(&[[855.9177227509814],[703.1662142999012],[550.4146736940756],[397.6630603246747],[244.91120392074373],[117.6167795694343]]));
    nodes.insert(82, arr2(&[[856.8496334605118],[704.0222920968939],[551.1949283222475],[398.36751379115145],[245.53992937959356],[118.1827552289178]]));
    nodes.insert(83, arr2(&[[856.8920777905798],[704.1480054884271],[551.4039002212528],[398.6597204762895],[245.9152929591055],[118.62705634703643]]));
    nodes.insert(84, arr2(&[[857.9744422267497],[705.1289013959995],[552.2833406029985],[399.43773467160486],[246.591978262066],[119.21977101799409]]));
    nodes.insert(85, arr2(&[[857.8676919002608],[705.1313063572205],[552.3948870142667],[399.65839142858283],[246.92164319537824],[119.63980216529629]]));
    nodes.insert(86, arr2(&[[859.0910595920399],[706.2283316696208],[553.3655860830125],[400.5028006179324],[247.63988273388736],[120.25347424626418]]));
    nodes.insert(87, arr2(&[[858.848270115975],[706.1187788563768],[553.3892530708212],[400.65964952791734],[247.92978932179022],[120.65368848686936]]));
    nodes.insert(88, arr2(&[[860.1900177385102],[707.3125796122852],[554.435125783614],[401.5576365616827],[248.6800302756792],[121.28146522134952]]));
    nodes.insert(89, arr2(&[[859.8364400937219],[707.1117548177884],[554.3870345621713],[401.6622356518752],[248.93717812345454],[121.6650892035405]]));
    nodes.insert(90, arr2(&[[861.3184400104204],[708.4218244773037],[555.5251957556068],[402.6285373537936],[249.73178116503914],[122.31735733613624]]));
    nodes.insert(91, arr2(&[[860.8274314571852],[708.1077388278907],[555.38801074558],[402.6682030692274],[249.94813468908814],[122.68021193183132]]));
    nodes.insert(92, arr2(&[[862.4490053149548],[709.5327702957699],[556.6165246366277],[403.70025507052895],[250.78390704155694],[123.35325326897572]]));
    nodes.insert(93, arr2(&[[861.8243631082338],[709.1090843956147],[556.3937698335951],[403.6783749128982],[250.96271778188787],[123.69848176101354]]));
    nodes.insert(94, arr2(&[[863.5665567693043],[710.6325614388029],[557.6985577604177],[404.7645353545808],[251.8304517204896],[124.38510240160804]]));
    nodes.insert(95, arr2(&[[862.8268917668105],[710.1142290225615],[557.4015302620179],[404.6887508943912],[251.97570949989898],[124.71367111549179]]));
    nodes.insert(96, arr2(&[[864.7128863313353],[711.7566985312917],[558.8005052136494],[405.84429953722827],[252.88805360754517],[125.42433416232993]]));
    nodes.insert(97, arr2(&[[863.836032009934],[711.1253170457965],[558.4145659831007],[405.7037342540962],[252.99264128605301],[125.73224640611132]]));
    nodes.insert(98, arr2(&[[865.849544005823],[712.8725406804425],[559.8955344712541],[406.9185218127092],[253.94148822733024],[126.4605340546344]]));
    nodes.insert(99, arr2(&[[864.8502388914858],[712.1403204634654],[559.4303659986629],[406.7203311297267],[254.0100368381737],[126.75033114161441]]));
    nodes
}
